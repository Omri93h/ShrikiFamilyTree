{"mappings":"ACEA,MAAM,EAAQ,SAAS,aAAa,CAAC,QACrC,CAAA,EAAM,WAAW,CAAG;A;A;A;A;A;AAMpB,CAAC,CACD,SAAS,IAAI,CAAC,WAAW,CAAC,GAE1B,SAAS,gBAAgB,CAAC,mBAAoB,KAC1C,QAAQ,GAAG,CAAC,2BACZ,SAAS,cAAc,CAAC,WAAW,KAAK,CAAC,OAAO,CAAG,QAInD,MAFgB,sHAGX,IAAI,CAAC,AAAC,IAEH,GADA,QAAQ,GAAG,CAAC,CAAC,+BAA+B,EAAE,EAAS,MAAM,CAAC,CAAC,EAC3D,CAAC,EAAS,EAAE,CACZ,MAAM,AAAI,MAAM,CAAC,6BAA6B,EAAE,EAAS,UAAU,CAAC,CAAC,EAEzE,OAAO,EAAS,IAAI,EACxB,GACC,IAAI,CAAC,AAAC,IACH,QAAQ,GAAG,CAAC,gBAAiB,GAC7B,AASZ,SAAyB,CAAI,EACzB,SAAS,cAAc,CAAC,WAAW,KAAK,CAAC,OAAO,CAAG,OAGnD,EAAK,OAAO,CAAC,CAAC,EAAQ,KAClB,EAAO,EAAE,CAAG,EAAQ,CACxB,GAGA,IAAM,EAAQ,EAAK,GAAG,CAAC,AAAC,GAAY,CAAA,CAChC,GAAI,EAAO,EAAE,CACb,KAAM,CAAC,EAAE,EAAO,SAAS,CAAC,CAAC,EAAE,EAAO,QAAQ,CAAC,CAAC,CAC9C,IAAK,EAAO,cAAc,CAAC,OAAO,CAAC,8CAA+C,0CAClF,KAAM,EAAE,CACR,IAAK,KACL,IAAK,IACT,CAAA,GAGA,EAAK,OAAO,CAAC,AAAC,IACV,GAAI,EAAO,eAAe,EAAI,EAAO,cAAc,CAAE,CACjD,IAAM,EAAS,EAAK,IAAI,CACpB,AAAC,GAAM,EAAE,SAAS,GAAK,EAAO,eAAe,EAAI,EAAE,QAAQ,GAAK,EAAO,cAAc,EAErF,IACA,CAAK,CAAC,EAAO,EAAE,CAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,EAAO,EAAE,EACxC,CAAK,CAAC,EAAO,EAAE,CAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,EAAO,EAAE,EAEhD,CACJ,GAGA,EAAK,OAAO,CAAC,AAAC,IACV,IAAM,EAAO,CAAK,CAAC,EAAO,EAAE,CAAG,EAAE,CACjC,GAAI,EAAO,eAAe,EAAI,EAAO,eAAe,CAAE,CAClD,IAAM,EAAS,EAAK,IAAI,CAAC,AAAC,GAAM,EAAE,SAAS,GAAK,EAAO,eAAe,EAChE,EAAS,EAAK,IAAI,CAAC,AAAC,GAAM,EAAE,SAAS,GAAK,EAAO,eAAe,EAClE,GAAQ,CAAA,EAAK,GAAG,CAAG,EAAO,EAAE,AAAF,EAC1B,GAAQ,CAAA,EAAK,GAAG,CAAG,EAAO,EAAE,AAAF,CAClC,CACJ,GAEA,QAAQ,GAAG,CAAC,+CAAgD,GAG5D,IAAI,WAAW,SAAS,cAAc,CAAC,cAAe,CAClD,WAAY,EACZ,YAAa,CACT,QAAS,OACT,MAAO,KACX,EACA,YAAa,WAAW,MAAM,CAAC,IAAI,CACnC,MAAO,CACX,EACJ,EA/D4B,EACpB,GACC,KAAK,CAAC,AAAC,IACJ,QAAQ,KAAK,CAAC,eAAgB,GAC9B,SAAS,cAAc,CAAC,WAAW,KAAK,CAAC,OAAO,CAAG,MACvD,EACR","sources":["<anon>","assets/js/script.js"],"sourcesContent":["// Add basic FamilyTree CSS manually\nconst style = document.createElement(\"style\");\nstyle.textContent = `\n  #familytree .balkangraph-node { /* Basic FamilyTree node styling */\n      border: 1px solid #ddd;\n      border-radius: 5px;\n      box-shadow: 0 0 5px rgba(0,0,0,0.1);\n  }\n`;\ndocument.head.appendChild(style);\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    console.log(\"Initializing data fetch\");\n    document.getElementById(\"spinner\").style.display = \"block\";\n    const dataUrl = \"https://script.google.com/macros/s/AKfycbzO2IRgFoPhFXYDXZij7H7NC5_dRlSzLAwki8s9DJoGToiVbRLFk9-NT8zEy24nqK63lA/exec\";\n    fetch(dataUrl).then((response)=>{\n        console.log(`Received response with status: ${response.status}`);\n        if (!response.ok) throw new Error(`Network response was not ok: ${response.statusText}`);\n        return response.json();\n    }).then((data)=>{\n        console.log(\"Fetched data:\", data);\n        buildFamilyTree(data);\n    }).catch((error)=>{\n        console.error(\"Fetch error:\", error);\n        document.getElementById(\"spinner\").style.display = \"none\";\n    });\n});\n// Function to build spouse and child connections\nfunction buildFamilyTree(data) {\n    document.getElementById(\"spinner\").style.display = \"none\";\n    // Assign a unique id for each person\n    data.forEach((person, index)=>{\n        person.id = index + 1;\n    });\n    // Map the data to nodes for FamilyTree.js\n    const nodes = data.map((person)=>({\n            id: person.id,\n            name: `${person.firstName} ${person.lastName}`,\n            img: person.directPhotoUrl.replace(\"https://drive.google.com/uc?export=view&id=\", \"https://drive.google.com/thumbnail?id=\"),\n            pids: [],\n            mid: null,\n            fid: null // Father's ID\n        }));\n    // Build spouse connections\n    data.forEach((person)=>{\n        if (person.spouseFirstName && person.spouseLastName) {\n            const spouse = data.find((p)=>p.firstName === person.spouseFirstName && p.lastName === person.spouseLastName);\n            if (spouse) {\n                nodes[person.id - 1].pids.push(spouse.id); // Connect spouses\n                nodes[spouse.id - 1].pids.push(person.id); // Ensure both sides are connected\n            }\n        }\n    });\n    // Build parent-child connections\n    data.forEach((person)=>{\n        const node = nodes[person.id - 1];\n        if (person.motherFirstName && person.fatherFirstName) {\n            const mother = data.find((p)=>p.firstName === person.motherFirstName);\n            const father = data.find((p)=>p.firstName === person.fatherFirstName);\n            if (mother) node.mid = mother.id; // Connect mother\n            if (father) node.fid = father.id; // Connect father\n        }\n    });\n    console.log(\"Final nodes data with automated connections:\", nodes);\n    // Initialize FamilyTree.js\n    new FamilyTree(document.getElementById(\"familytree\"), {\n        dataSource: nodes,\n        nodeBinding: {\n            field_0: \"name\",\n            img_0: \"img\"\n        },\n        mouseScrool: FamilyTree.action.none,\n        nodes: nodes\n    });\n}\n\n//# sourceMappingURL=index.0b48d150.js.map\n","\n// Add basic FamilyTree CSS manually\nconst style = document.createElement(\"style\");\nstyle.textContent = `\n  #familytree .balkangraph-node { /* Basic FamilyTree node styling */\n      border: 1px solid #ddd;\n      border-radius: 5px;\n      box-shadow: 0 0 5px rgba(0,0,0,0.1);\n  }\n`;\ndocument.head.appendChild(style);\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    console.log(\"Initializing data fetch\");\n    document.getElementById(\"spinner\").style.display = \"block\";\n\n    const dataUrl = \"https://script.google.com/macros/s/AKfycbzO2IRgFoPhFXYDXZij7H7NC5_dRlSzLAwki8s9DJoGToiVbRLFk9-NT8zEy24nqK63lA/exec\";\n\n    fetch(dataUrl)\n        .then((response) => {\n            console.log(`Received response with status: ${response.status}`);\n            if (!response.ok) {\n                throw new Error(`Network response was not ok: ${response.statusText}`);\n            }\n            return response.json();\n        })\n        .then((data) => {\n            console.log(\"Fetched data:\", data);\n            buildFamilyTree(data);\n        })\n        .catch((error) => {\n            console.error(\"Fetch error:\", error);\n            document.getElementById(\"spinner\").style.display = \"none\";\n        });\n});\n\n// Function to build spouse and child connections\nfunction buildFamilyTree(data) {\n    document.getElementById(\"spinner\").style.display = \"none\";\n\n    // Assign a unique id for each person\n    data.forEach((person, index) => {\n        person.id = index + 1;\n    });\n\n    // Map the data to nodes for FamilyTree.js\n    const nodes = data.map((person) => ({\n        id: person.id,\n        name: `${person.firstName} ${person.lastName}`,\n        img: person.directPhotoUrl.replace(\"https://drive.google.com/uc?export=view&id=\", \"https://drive.google.com/thumbnail?id=\"),\n        pids: [], // Spouse connections\n        mid: null, // Mother's ID\n        fid: null  // Father's ID\n    }));\n\n    // Build spouse connections\n    data.forEach((person) => {\n        if (person.spouseFirstName && person.spouseLastName) {\n            const spouse = data.find(\n                (p) => p.firstName === person.spouseFirstName && p.lastName === person.spouseLastName\n            );\n            if (spouse) {\n                nodes[person.id - 1].pids.push(spouse.id); // Connect spouses\n                nodes[spouse.id - 1].pids.push(person.id); // Ensure both sides are connected\n            }\n        }\n    });\n\n    // Build parent-child connections\n    data.forEach((person) => {\n        const node = nodes[person.id - 1];\n        if (person.motherFirstName && person.fatherFirstName) {\n            const mother = data.find((p) => p.firstName === person.motherFirstName);\n            const father = data.find((p) => p.firstName === person.fatherFirstName);\n            if (mother) node.mid = mother.id; // Connect mother\n            if (father) node.fid = father.id; // Connect father\n        }\n    });\n\n    console.log(\"Final nodes data with automated connections:\", nodes);\n\n    // Initialize FamilyTree.js\n    new FamilyTree(document.getElementById(\"familytree\"), {\n        dataSource: nodes,\n        nodeBinding: {\n            field_0: \"name\",\n            img_0: \"img\"\n        },\n        mouseScrool: FamilyTree.action.none,\n        nodes: nodes\n    });\n}\n"],"names":["style","document","createElement","textContent","head","appendChild","addEventListener","console","log","getElementById","display","fetch","then","response","status","ok","Error","statusText","json","data","buildFamilyTree","forEach","person","index","id","nodes","map","name","firstName","lastName","img","directPhotoUrl","replace","pids","mid","fid","spouseFirstName","spouseLastName","spouse","find","p","push","node","motherFirstName","fatherFirstName","mother","father","FamilyTree","dataSource","nodeBinding","field_0","img_0","mouseScrool","action","none","catch","error"],"version":3,"file":"index.0b48d150.js.map"}