{"mappings":"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","sources":["assets/js/script.js"],"sourcesContent":["// Add basic FamilyTree CSS manually\nconst style = document.createElement(\"style\");\nstyle.textContent = `\n  #familytree .balkangraph-node { /* Basic FamilyTree node styling */\n      border: 1px solid #ddd;\n      border-radius: 5px;\n      box-shadow: 0 0 5px rgba(0,0,0,0.1);\n  }\n`;\ndocument.head.appendChild(style);\n\n// Function to adjust dates to local time by adding the offset\nfunction adjustToLocalTime(dateString) {\n\tconst date = new Date(dateString);\n\tdate.setMinutes(date.getMinutes() + date.getTimezoneOffset()); // Adjusts to local time\n\treturn date;\n}\n\n// Function to calculate the age if the person is still alive\nfunction getAge(birthDate) {\n\tconst birth = adjustToLocalTime(birthDate);\n\tconst today = new Date();\n\n\tlet age = today.getFullYear() - birth.getFullYear();\n\tif (\n\t\ttoday.getMonth() < birth.getMonth() ||\n\t\t(today.getMonth() === birth.getMonth() && today.getDate() < birth.getDate())\n\t) {\n\t\tage--;\n\t}\n\treturn age.toString();\n}\n\n// Function to get the lifespan in the format \"birthYear - deathYear\"\nfunction getLifeSpan(birthDate, deathDate) {\n\tconst birth = adjustToLocalTime(birthDate);\n\tconst death = adjustToLocalTime(deathDate);\n\n\tconst birthYear = birth.getFullYear();\n\tconst deathYear = death.getFullYear();\n\treturn `${birthYear} - ${deathYear}`;\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n\tconsole.log(\"Initializing data fetch\");\n\tdocument.getElementById(\"spinner\").style.display = \"block\";\n\n\tconst dataUrl =\n\t\t\"https://script.google.com/macros/s/AKfycbw0B39BCAg0-LR-81NwcCzS4_JACvMYd8Bg_HN3mBsyl37ZJ2zYgBm6ONA24RzqyGIkrg/exec\";\n\n\tfetch(dataUrl)\n\t\t.then((response) => {\n\t\t\tconsole.log(`Received response with status: ${response.status}`);\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(`Network response was not ok: ${response.statusText}`);\n\t\t\t}\n\t\t\treturn response.json();\n\t\t})\n\t\t.then((data) => {\n\t\t\tconsole.log(\"Fetched data:\", data);\n\t\t\tbuildFamilyTree(data);\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error(\"Fetch error:\", error);\n\t\t\t// document.getElementById(\"spinner\").style.display = \"none\";\n\t\t});\n});\n\n// Function to build spouse and child connections\nfunction buildFamilyTree(data) {\n\t// document.getElementById(\"spinner\").style.display = \"none\";\n\n\t// Assign a unique id for each person\n\tdata.forEach((person, index) => {\n\t\tperson.id = index + 1;\n\t});\n\n\t// Map the data to nodes for FamilyTree.js\n\tconst nodes = data.map((person) => ({\n\t\tid: person.id,\n\t\tname: `${person.firstName} ${person.lastName}`,\n\t\timg: person.directPhotoUrl.replace(\n\t\t\t\"https://drive.google.com/uc?export=view&id=\",\n\t\t\t\"https://drive.google.com/thumbnail?id=\"\n\t\t),\n\t\tpids: [], // Spouse connections\n\t\tmid: null, // Mother's ID\n\t\tfid: null, // Father's ID\n\t\tage: person.deathDate == \"\" ? \"גיל: \" + getAge(person.birthDate) : getLifeSpan(person.birthDate, person.deathDate),\n\t}));\n\n\t// Build spouse connections\n\tdata.forEach((person) => {\n\t\tif (person.spouseFirstName && person.spouseLastName) {\n\t\t\tconst spouse = data.find((p) => p.firstName === person.spouseFirstName && p.lastName === person.spouseLastName);\n\t\t\tif (spouse) {\n\t\t\t\tnodes[person.id - 1].pids.push(spouse.id); // Connect spouses\n\t\t\t\tnodes[spouse.id - 1].pids.push(person.id); // Ensure both sides are connected\n\t\t\t}\n\t\t}\n\t});\n\n\t// Build parent-child connections\n\tdata.forEach((person) => {\n\t\tconst node = nodes[person.id - 1];\n\t\tif (person.motherFirstName && person.fatherFirstName) {\n\t\t\tconst mother = data.find((p) => p.firstName === person.motherFirstName);\n\t\t\tconst father = data.find((p) => p.firstName === person.fatherFirstName);\n\t\t\tif (mother) node.mid = mother.id; // Connect mother\n\t\t\tif (father) node.fid = father.id; // Connect father\n\t\t}\n\t});\n\n\tconsole.log(\"Final nodes data with automated connections:\", nodes);\n\n\t// Initialize FamilyTree.js\n\tnew FamilyTree(document.getElementById(\"familytree\"), {\n\t\ttemplate: \"john\",\n\t\tdataSource: nodes,\n\t\tnodeBinding: {\n\t\t\tfield_0: \"name\",\n\t\t\tfield_1: \"age\",\n\t\t\timg_0: \"img\",\n\t\t},\n\t\tmouseScrool: FamilyTree.action.none,\n\t\tnodes: nodes,\n\t\tenableSearch: false,\n\t\tnodeMouseClick: false,\n\t\tpartnerNodeSeparation: -119,\n\t\tlevelSeparation: 60,\n\t\tminPartnerSeparation: 20,\n\t\tpartnerChildrenSplitSeparation: -5,\n\t\tsiblingSeparation: 110,\n\t});\n\n\n}\n"],"names":[],"version":3,"file":"index.a6d2c788.js.map","sourceRoot":"/__parcel_source_root/"}