{"mappings":"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","sources":["assets/js/script.js"],"sourcesContent":["\n// Add basic FamilyTree CSS manually\nconst style = document.createElement(\"style\");\nstyle.textContent = `\n  #familytree .balkangraph-node { /* Basic FamilyTree node styling */\n      border: 1px solid #ddd;\n      border-radius: 5px;\n      box-shadow: 0 0 5px rgba(0,0,0,0.1);\n  }\n`;\ndocument.head.appendChild(style);\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    console.log(\"Initializing data fetch\");\n    document.getElementById(\"spinner\").style.display = \"block\";\n\n    const dataUrl = \"https://script.google.com/macros/s/AKfycbzO2IRgFoPhFXYDXZij7H7NC5_dRlSzLAwki8s9DJoGToiVbRLFk9-NT8zEy24nqK63lA/exec\";\n\n    fetch(dataUrl)\n        .then((response) => {\n            console.log(`Received response with status: ${response.status}`);\n            if (!response.ok) {\n                throw new Error(`Network response was not ok: ${response.statusText}`);\n            }\n            return response.json();\n        })\n        .then((data) => {\n            console.log(\"Fetched data:\", data);\n            buildFamilyTree(data);\n        })\n        .catch((error) => {\n            console.error(\"Fetch error:\", error);\n            document.getElementById(\"spinner\").style.display = \"none\";\n        });\n});\n\n// Function to build spouse and child connections\nfunction buildFamilyTree(data) {\n    document.getElementById(\"spinner\").style.display = \"none\";\n\n    // Assign a unique id for each person\n    data.forEach((person, index) => {\n        person.id = index + 1;\n    });\n\n    // Map the data to nodes for FamilyTree.js\n    const nodes = data.map((person) => ({\n        id: person.id,\n        name: `${person.firstName} ${person.lastName}`,\n        img: person.directPhotoUrl.replace(\"https://drive.google.com/uc?export=view&id=\", \"https://drive.google.com/thumbnail?id=\"),\n        pids: [], // Spouse connections\n        mid: null, // Mother's ID\n        fid: null  // Father's ID\n    }));\n\n    // Build spouse connections\n    data.forEach((person) => {\n        if (person.spouseFirstName && person.spouseLastName) {\n            const spouse = data.find(\n                (p) => p.firstName === person.spouseFirstName && p.lastName === person.spouseLastName\n            );\n            if (spouse) {\n                nodes[person.id - 1].pids.push(spouse.id); // Connect spouses\n                nodes[spouse.id - 1].pids.push(person.id); // Ensure both sides are connected\n            }\n        }\n    });\n\n    // Build parent-child connections\n    data.forEach((person) => {\n        const node = nodes[person.id - 1];\n        if (person.motherFirstName && person.fatherFirstName) {\n            const mother = data.find((p) => p.firstName === person.motherFirstName);\n            const father = data.find((p) => p.firstName === person.fatherFirstName);\n            if (mother) node.mid = mother.id; // Connect mother\n            if (father) node.fid = father.id; // Connect father\n        }\n    });\n\n    console.log(\"Final nodes data with automated connections:\", nodes);\n\n    // Initialize FamilyTree.js\n    new FamilyTree(document.getElementById(\"familytree\"), {\n        dataSource: nodes,\n        nodeBinding: {\n            field_0: \"name\",\n            img_0: \"img\"\n        },\n        mouseScrool: FamilyTree.action.none,\n        nodes: nodes,\n        enableSearch: false,\n        nodeMouseClick: false,\n        partnerNodeSeparation: -119,\n        minPartnerSeparation: 10,\n        levelSeparation: 85,\n        minPartnerSeparation: 10,\n        partnerChildrenSplitSeparation: 1,\n        siblingSeparation: 100\n\n    });\n}\n"],"names":[],"version":3,"file":"index.a6d2c788.js.map","sourceRoot":"/__parcel_source_root/"}