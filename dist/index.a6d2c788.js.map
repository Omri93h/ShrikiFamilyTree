{"mappings":"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","sources":["assets/js/script.js"],"sourcesContent":["GOOGLE_SCRIPT_URL = 'https://script.google.com/macros/s/AKfycbwQSVPqHLgN2YjJzu9LsPZTAUCxyPl-I2IDxXewbEhJi2hr7VYRrBzskuyqpDUK6oEdSQ/exec'\n\n// Function to adjust dates to local time by adding the offset\nfunction adjustToLocalTime(dateString) {\n\tconst date = new Date(dateString);\n\tdate.setMinutes(date.getMinutes() + date.getTimezoneOffset()); // Adjusts to local time\n\treturn date;\n}\n\n\n// Function to calculate the age if the person is still alive\nfunction getAge(birthDate) {\n\tconst birth = adjustToLocalTime(birthDate);\n\tconst today = new Date();\n\n\tlet age = today.getFullYear() - birth.getFullYear();\n\tif (\n\t\ttoday.getMonth() < birth.getMonth() ||\n\t\t(today.getMonth() === birth.getMonth() && today.getDate() < birth.getDate())\n\t) {\n\t\tage--;\n\t}\n\treturn age.toString();\n}\n\n// Function to get the lifespan in the format \"birthYear - deathYear\"\nfunction getLifeSpan(birthDate, deathDate) {\n\tconst birth = adjustToLocalTime(birthDate);\n\tconst death = adjustToLocalTime(deathDate);\n\n\tconst birthYear = birth.getFullYear();\n\tconst deathYear = death.getFullYear();\n\treturn `${birthYear} - ${deathYear}`;\n}\n\n\n\n\n\nfunction buildParentConnections(data, nodes) {\n\tdata.forEach((person) => {\n\t\tconst node = nodes[person.id - 1];\n\t\tconst motherFirstName = person.motherFirstName;\n\t\tconst motherLastName = person.motherLastName;\n\t\tconst fatherFirstName = person.fatherFirstName;\n\t\tconst fatherLastName = person.fatherLastName;\n\n\t\tlet mother = null;\n\t\tlet father = null;\n\n\t\t// Handle Mother Connection\n\t\tif (motherFirstName && motherLastName) {\n\t\t\t// Find all potential mothers matching both first and last names\n\t\t\tconst potentialMothers = data.filter(\n\t\t\t\t(p) =>\n\t\t\t\t\tp.firstName === motherFirstName &&\n\t\t\t\t\tp.lastName === motherLastName\n\t\t\t);\n\n\t\t\tif (potentialMothers.length === 1) {\n\t\t\t\tmother = potentialMothers[0];\n\t\t\t} else if (potentialMothers.length > 1) {\n\t\t\t\t// we currently choose the first connection that created (bandage fix)\n\t\t\t\tmother = potentialMothers[0];\n\n\t\t\t\t// If multiple mothers found, attempt to find one whose spouse is the father\n\t\t\t\tconst potentialFathers = data.filter(\n\t\t\t\t\t(p) =>\n\t\t\t\t\t\tp.firstName === fatherFirstName &&\n\t\t\t\t\t\tp.lastName === fatherLastName\n\t\t\t\t);\n\n\t\t\t\tfor (let m of potentialMothers) {\n\t\t\t\t\tfor (let f of potentialFathers) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tnodes[m.id - 1].pids.includes(f.id) &&\n\t\t\t\t\t\t\tnodes[f.id - 1].pids.includes(m.id)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tmother = m;\n\t\t\t\t\t\t\tfather = f;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (mother) break;\n\t\t\t\t}\n\n\t\t\t\tif (!mother) {\n\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t`Multiple mothers found for ${person.firstName} ${person.lastName}, but no spouse connection with the father.`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.warn(\n\t\t\t\t\t`No mother found with name ${motherFirstName} ${motherLastName} for ${person.firstName} ${person.lastName}.`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Handle Father Connection\n\t\tif (fatherFirstName && fatherLastName && !father) {\n\t\t\t// Find all potential fathers matching both first and last names\n\t\t\tconst potentialFathers = data.filter(\n\t\t\t\t(p) =>\n\t\t\t\t\tp.firstName === fatherFirstName &&\n\t\t\t\t\tp.lastName === fatherLastName\n\t\t\t);\n\n\t\t\tif (potentialFathers.length === 1) {\n\t\t\t\tfather = potentialFathers[0];\n\t\t\t} else if (potentialFathers.length > 1) {\n\t\t\t\t// we currently choose the first connection that created (bandage fix)\n\t\t\t\tfather = potentialFathers[0];\n\n\t\t\t\t// If multiple fathers found, attempt to find one whose spouse is the mother\n\t\t\t\tconst potentialMothers = data.filter(\n\t\t\t\t\t(p) =>\n\t\t\t\t\t\tp.firstName === motherFirstName &&\n\t\t\t\t\t\tp.lastName === motherLastName\n\t\t\t\t);\n\n\t\t\t\tfor (let f of potentialFathers) {\n\t\t\t\t\tfor (let m of potentialMothers) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tnodes[f.id - 1].pids.includes(m.id) &&\n\t\t\t\t\t\t\tnodes[m.id - 1].pids.includes(f.id)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tfather = f;\n\t\t\t\t\t\t\tmother = m;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (father) break;\n\t\t\t\t}\n\n\t\t\t\tif (!father) {\n\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t`Multiple fathers found for ${person.firstName} ${person.lastName}, but no spouse connection with the mother.`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.warn(\n\t\t\t\t\t`No father found with name ${fatherFirstName} ${fatherLastName} for ${person.firstName} ${person.lastName}.`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Assign mother and father IDs if found\n\t\tif (mother) {\n\t\t\tnode.mid = mother.id;\n\t\t}\n\t\tif (father) {\n\t\t\tnode.fid = father.id;\n\t\t}\n\t});\n\n\t// Sort children by birth date for each parent-child group\n\tdata.forEach((person) => {\n\t\tconst motherFirstName = person.motherFirstName;\n\t\tconst motherLastName = person.motherLastName;\n\t\tconst fatherFirstName = person.fatherFirstName;\n\t\tconst fatherLastName = person.fatherLastName;\n\n\t\tif (\n\t\t\tmotherFirstName &&\n\t\t\tmotherLastName &&\n\t\t\tfatherFirstName &&\n\t\t\tfatherLastName\n\t\t) {\n\t\t\tlet children = data.filter(\n\t\t\t\t(child) =>\n\t\t\t\t\tchild.motherFirstName === motherFirstName &&\n\t\t\t\t\tchild.motherLastName === motherLastName &&\n\t\t\t\t\tchild.fatherFirstName === fatherFirstName &&\n\t\t\t\t\tchild.fatherLastName === fatherLastName\n\t\t\t);\n\t\t\tchildren.sort(\n\t\t\t\t(a, b) => new Date(a.birthDate) - new Date(b.birthDate)\n\t\t\t);\n\n\t\t\t// Update children in nodes by order of birth date\n\t\t\tchildren.forEach((child, index) => {\n\t\t\t\tnodes[child.id - 1].siblingOrder = index;\n\t\t\t});\n\t\t} else if (motherFirstName && motherLastName) {\n\t\t\t// Handle single mother\n\t\t\tlet children = data.filter(\n\t\t\t\t(child) =>\n\t\t\t\t\tchild.motherFirstName === motherFirstName &&\n\t\t\t\t\tchild.motherLastName === motherLastName &&\n\t\t\t\t\t(!child.fatherFirstName || !child.fatherLastName)\n\t\t\t);\n\t\t\tchildren.sort(\n\t\t\t\t(a, b) => new Date(a.birthDate) - new Date(b.birthDate)\n\t\t\t);\n\n\t\t\tchildren.forEach((child, index) => {\n\t\t\t\tnodes[child.id - 1].siblingOrder = index;\n\t\t\t});\n\t\t} else if (fatherFirstName && fatherLastName) {\n\t\t\t// Handle single father\n\t\t\tlet children = data.filter(\n\t\t\t\t(child) =>\n\t\t\t\t\tchild.fatherFirstName === fatherFirstName &&\n\t\t\t\t\tchild.fatherLastName === fatherLastName &&\n\t\t\t\t\t(!child.motherFirstName || !child.motherLastName)\n\t\t\t);\n\t\t\tchildren.sort(\n\t\t\t\t(a, b) => new Date(a.birthDate) - new Date(b.birthDate)\n\t\t\t);\n\n\t\t\tchildren.forEach((child, index) => {\n\t\t\t\tnodes[child.id - 1].siblingOrder = index;\n\t\t\t});\n\t\t}\n\t});\n\n\t// Reorder the nodes array based on sibling order for visualization\n\tnodes.sort((a, b) => (a.siblingOrder || 0) - (b.siblingOrder || 0));\n}\n\n\n\n\n\n\nfunction buildSpouseConnections(data, nodes) {\n\t// Build spouse connections\n\tdata.forEach((person) => {\n\t\tconst spouseFirstName = person.spouseFirstName;\n\t\tconst spouseLastName = person.spouseLastName;\n\n\t\tif (spouseFirstName && spouseLastName) {\n\t\t\t// Find all potential spouses matching both first and last names\n\t\t\tconst potentialSpouses = data.filter(\n\t\t\t\t(p) =>\n\t\t\t\t\tp.firstName === spouseFirstName &&\n\t\t\t\t\tp.lastName === spouseLastName\n\t\t\t);\n\n\t\t\tif (potentialSpouses.length === 1) {\n\t\t\t\t// Establish bidirectional spouse connections\n\t\t\t\tconst spouse = potentialSpouses[0];\n\t\t\t\tnodes[person.id - 1].pids.push(spouse.id);\n\t\t\t\tnodes[spouse.id - 1].pids.push(person.id);\n\t\t\t} else if (potentialSpouses.length > 1) {\n\t\t\t\tconsole.warn(\n\t\t\t\t\t`Multiple spouses found with name ${spouseFirstName} ${spouseLastName} for ${person.firstName} ${person.lastName}. Spouse connection skipped.`\n\t\t\t\t);\n\t\t\t\t// we currently choose the first connection that created (bandage fix)\n\t\t\t\tconst spouse = potentialSpouses[0];\n\t\t\t\tnodes[person.id - 1].pids.push(spouse.id);\n\t\t\t\tnodes[spouse.id - 1].pids.push(person.id);\n\t\t\t} else {\n\t\t\t\tconsole.warn(\n\t\t\t\t\t`No spouse found with name ${spouseFirstName} ${spouseLastName} for ${person.firstName} ${person.lastName}.`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t});\n}\n\n\n\n\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n\tconsole.log(\"Initializing data fetch\");\n\tdocument.getElementById(\"spinner\").style.display = \"block\";\n\n\tfetch(GOOGLE_SCRIPT_URL)\n\t\t.then((response) => {\n\t\t\tconsole.log(`Received response with status: ${response.status}`);\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(`Network response was not ok: ${response.statusText}`);\n\t\t\t}\n\t\t\treturn response.json();\n\t\t})\n\t\t.then((data) => {\n\t\t\tconsole.log(\"Fetched data:\", data);\n\t\t\tbuildFamilyTree(data);\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error(\"Fetch error:\", error);\n\t\t\tdocument.getElementById(\"spinner\").style.display = \"none\";\n\t\t});\n});\n\n\n\nfunction buildNodes(data) {\n\tconst nodes = data.map((person) => ({\n\t\tid: person.id,\n\t\tname: `${person.firstName} ${person.lastName}`,\n\t\timg: person.directPhotoUrl.replace(\n\t\t\t\"https://drive.google.com/uc?export=view&id=\",\n\t\t\t\"https://drive.google.com/thumbnail?id=\"\n\t\t),\n\t\tpids: [], // Spouse connections\n\t\tmid: null, // Mother's ID\n\t\tfid: null, // Father's ID\n\t\tage: person.deathDate == \"\" ? \"גיל: \" + getAge(person.birthDate) : getLifeSpan(person.birthDate, person.deathDate),\n\t}));\n\n\treturn nodes;\n}\n\n\n\nfunction buildFamilyTree(data) {\n\tdocument.getElementById(\"spinner\").style.display = \"none\";\n\n\n\t// Assign a unique id for each person\n\tdata.forEach((person, index) => {\n\t\tperson.id = index + 1;\n\t});\n\n\t// Map the data to nodes for FamilyTree.js\n\tconst nodes = buildNodes(data);\n\n\tbuildSpouseConnections(data, nodes);\n\tbuildParentConnections(data, nodes);\n\n\t// temp hard coded fix - need to fix later!\n\tnodes[0][\"pids\"].pop();\n\tnodes[1][\"pids\"].pop();\n\n\n\t// Initialize FamilyTree.js\n\tFamilyTree.templates.john.field_0 =\n\t\t`<text data-width=\"230\" style=\"font-size: 16px;font-weight:bold;\" fill=\"#2c3e50;\" x=\"60\" y=\"140\" text-anchor=\"middle\">{val}</text>`\n\tFamilyTree.templates.john.field_1 =\n\t\t`<text data-width=\"150\" style=\"font-size: 13px;\" fill=\"#2c3e50;\" x=\"60\" y=\"160\" text-anchor=\"middle\">{val}</text>`\n\tvar family = new FamilyTree(document.getElementById(\"tree\"), {\n\t\ttemplate: \"john\",\n\t\tnodeBinding: {\n\t\t\tfield_0: \"name\",\n\t\t\tfield_1: \"age\",\n\t\t\timg_0: \"img\",\n\t\t},\n\t\t// mouseScrool: FamilyTree.action.none,\n\t\tenableSearch: true,\n\t\tnodeMouseClick: false,\n\t\t// partnerNodeSeparation: 30,\n\t\tlevelSeparation: 150,\n\t\tminPartnerSeparation: 40,\n\t\tsiblingSeparation: 70,\n\t\tsubtreeSeparation: 100,\n\t\tscaleInitial: FamilyTree.match.height,\n\t\tpadding: 40\n\n\n\t});\n\n\tfamily.load(nodes);\n\n\tconsole.log(\"Final Nodes:\", nodes)\n}\n\n\n"],"names":[],"version":3,"file":"index.a6d2c788.js.map","sourceRoot":"/__parcel_source_root/"}